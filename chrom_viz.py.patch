# Patch generated by Pyment v0.3.3

--- a/chrom_viz.py
+++ b/chrom_viz.py
@@ -8,10 +8,11 @@
 
 ### Heatmap
 def white_bg(fig):
-    """This function changes a plotly figure `fig` to have a white background. Changes the figure object. 
-    
+    """This function changes a plotly figure `fig` to have a white background. Changes the figure object.
+
     :param fig: plotly figure
     :type fig: plotly figure
+
     """
     fig.update_layout({"plot_bgcolor": "rgba(0, 0, 0, 0)",
                     "paper_bgcolor": "rgba(0, 0, 0, 0)"})
@@ -20,14 +21,15 @@
     
 
 def preprocess_diff(diff, row_labels): 
-    """ Returns a filtered chromatin class score array and corresponding row labels. For any particular genomic loci (e.g.chr10:89623103), Sei outputs three scores corresponding to each potential alteration at that position (e.g. G>A, G>C, and G>T). For each position, this function selects the alteration that has the highest average absolute score across all chromatin classes. 
-    
+    """Returns a filtered chromatin class score array and corresponding row labels. For any particular genomic loci (e.g.chr10:89623103), Sei outputs three scores corresponding to each potential alteration at that position (e.g. G>A, G>C, and G>T). For each position, this function selects the alteration that has the highest average absolute score across all chromatin classes.
+
     :param diff: NumPy array of Sei chromatin profile scores. Should have shape (X, 21907), where 21,907 corresponds to the number of chromatin profiles and X corresponds to the number of alterations.
     :type diff: NumPy array
-    :param row_labels: contains metadata about the rows (and the SNPs described by the rows) in the `diff` array. 
+    :param row_labels: contains metadata about the rows (and the SNPs described by the rows) in the `diff` array.
     :type row_labels: Pandas DataFrame
-    :return: Returns filtered `diff` and `row_labels`
+    :returns: Returns filtered `diff` and `row_labels`
     :rtype: NumPy array, Pandas DataFrame
+
     """
     
     diff_avg = np.max(diff, axis=1) # take the max score across all the profiles
@@ -39,11 +41,11 @@
 
 
 def rank_scatter_plot(diff, row_labels, loc, loc_index, figname, fontsize=18, static=False):
-    """ Creates, displays, and saves a scatter plot of ranked chromatin profiles at for a particular SNP. Each point corresponds to a chromatin profile, with hover data specifying: rank, score, profile name, and tissue of origin.
-    
+    """Creates, displays, and saves a scatter plot of ranked chromatin profiles at for a particular SNP. Each point corresponds to a chromatin profile, with hover data specifying: rank, score, profile name, and tissue of origin.
+
     :param diff: NumPy array of Sei chromatin profile scores. Should have shape (X, 21907), where 21,907 corresponds to the number of chromatin profiles and X corresponds to the number of alterations.
     :type diff: NumPy array
-    :param row_labels: contains metadata to describe the SNPs being analyzed. Should have at least the following columns: ["chrom", "pos", "name", "ref", "alt"]. Must have the same number of rows as `data`. 
+    :param row_labels: contains metadata to describe the SNPs being analyzed. Should have at least the following columns: ["chrom", "pos", "name", "ref", "alt"]. Must have the same number of rows as `data`.
     :type row_labels: Pandas DataFrame
     :param loc: the chromosomal position of the SNP of interest.
     :type loc: int
@@ -54,7 +56,7 @@
     :param fontsize: fontsize for graph, defaults to 8
     :type fontsize: int, optional.
     :param static: species whether to output a static png image (True) or an interactive html image in your notebook (False), defaults to False
-    :type boolean, optional
+
     """
     chrom_names = pd.read_csv("../model_data/target_names.txt", header=None, sep="\n").to_numpy()
     chrom_names = [name[0].split("|") for name in chrom_names]
@@ -81,11 +83,11 @@
     else: fig.show()
 
 def chromatin_profile_heatmap(data, row_labels, loc, loc_index, figname, top_X=5, pos_window=5, fontsize=8):
-    """ Creates, displays, and saves a heatmap of the top chromatin profile scores within a short genomic sequence. The y axis shows the top chromatin profiles for each of the user-defined SNPs of interest. The profile labels are in the following format: chromatin profile | tissue of origin | genomic position of associated SNP. The x axis shows genomic positions. 
-    
+    """Creates, displays, and saves a heatmap of the top chromatin profile scores within a short genomic sequence. The y axis shows the top chromatin profiles for each of the user-defined SNPs of interest. The profile labels are in the following format: chromatin profile | tissue of origin | genomic position of associated SNP. The x axis shows genomic positions.
+
     :param data: NumPy array of Sei chromatin profile scores. Should have shape (X, 21907), where 21,907 corresponds to the number of chromatin profiles and X corresponds to the number of alterations.
     :type data: NumPy array
-    :param row_labels: contains metadata to describe the SNPs being analyzed. Should have at least the following columns: ["chrom", "pos", "name", "ref", "alt"]. Must have the same number of rows as `data`. 
+    :param row_labels: contains metadata to describe the SNPs being analyzed. Should have at least the following columns: ["chrom", "pos", "name", "ref", "alt"]. Must have the same number of rows as `data`.
     :type row_labels: Pandas DataFrame
     :param loc: the chromosomal position of the SNP of interest.
     :type loc: int
@@ -99,6 +101,8 @@
     :type window: int, optional
     :param fontsize: fontsize for graph, defaults to 8
     :type fontsize: int, optional.
+    :param pos_window:  (Default value = 5)
+
     """
     chrom_names = pd.read_csv("../model_data/target_names.txt", header=None, sep="\n").to_numpy()
     chrom_names = [name[0].split("|") for name in chrom_names]
